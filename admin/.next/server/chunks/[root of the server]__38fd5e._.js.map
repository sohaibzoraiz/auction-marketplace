{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/sohaibmurtaz/auction-marketplace/admin/src/libs/prismaDb.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: [\"query\"],\n  });\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,2GAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":["file:///Users/sohaibmurtaz/auction-marketplace/admin/src/libs/auth.ts"],"sourcesContent":["import { prisma } from \"@/libs/prismaDb\";\nimport { PrismaAdapter } from \"@next-auth/prisma-adapter\";\nimport { type NextAuthOptions, DefaultSession } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport GitHubProvider from \"next-auth/providers/github\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport EmailProvider from \"next-auth/providers/email\";\nimport { getServerSession } from \"next-auth\";\nimport bcrypt from \"bcrypt\";\nimport { User } from \"@prisma/client\";\n\ndeclare module \"next-auth\" {\n  interface Session extends DefaultSession {\n    user: User & DefaultSession[\"user\"];\n  }\n}\n\nexport const authOptions: NextAuthOptions = {\n  pages: {\n    signIn: \"/auth/signin\",\n  },\n  adapter: PrismaAdapter(prisma),\n  secret: process.env.SECRET,\n  session: {\n    strategy: \"jwt\",\n  },\n\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"text\", placeholder: \"Jhondoe\" },\n        password: { label: \"Password\", type: \"password\" },\n        username: { label: \"Username\", type: \"text\", placeholder: \"Jhon Doe\" },\n      },\n\n      async authorize(credentials) {\n        // check to see if eamil and password is there\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error(\"Please enter an email or password\");\n        }\n\n        // check to see if user already exist\n        const user = await prisma.user.findUnique({\n          where: {\n            email: credentials.email,\n          },\n        });\n\n        // if user was not found\n        if (!user || !user?.password) {\n          throw new Error(\"No user found\");\n        }\n\n        // check to see if passwords match\n        const passwordMatch = await bcrypt.compare(\n          credentials.password,\n          user.password,\n        );\n\n        if (!passwordMatch) {\n          throw new Error(\"Incorrect password\");\n        }\n\n        return user;\n      },\n    }),\n\n    EmailProvider({\n      server: {\n        host: process.env.EMAIL_SERVER_HOST,\n        port: Number(process.env.EMAIL_SERVER_PORT),\n        auth: {\n          user: process.env.EMAIL_SERVER_USER,\n          pass: process.env.EMAIL_SERVER_PASSWORD,\n        },\n      },\n      from: process.env.EMAIL_FROM,\n    }),\n\n    GitHubProvider({\n      clientId: process.env.GITHUB_CLIENT_ID || \"\",\n      clientSecret: process.env.GITHUB_CLIENT_SECRET || \"\",\n    }),\n\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n    }),\n  ],\n\n  callbacks: {\n    jwt: async (payload: any) => {\n      const { token, trigger, session } = payload;\n      const user: User = payload.user;\n\n      if (trigger === \"update\") {\n        // console.log(token.picture, session.user);\n        return {\n          ...token,\n          ...session.user,\n          picture: session.user.image,\n          image: session.user.image,\n        };\n      }\n\n      if (user) {\n        return {\n          ...token,\n          uid: user.id,\n          role: user.role,\n          picture: user.image,\n          image: user.image,\n        };\n      }\n      return token;\n    },\n\n    session: async ({ session, token }) => {\n      if (session?.user) {\n        return {\n          ...session,\n          user: {\n            ...session.user,\n            id: token.sub,\n            role: token.role,\n            image: token.picture,\n          },\n        };\n      }\n      return session;\n    },\n  },\n\n  // debug: process.env.NODE_ENV === \"developement\",\n};\n\nexport const getAuthSession = async () => {\n  return getServerSession(authOptions);\n};\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 359, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":["file:///Users/sohaibmurtaz/auction-marketplace/admin/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth/next\";\nimport { authOptions } from \"@/libs/auth\";\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,UAAU,CAAA,GAAA,+IAAA,CAAA,UAAQ,AAAD,EAAE,qHAAA,CAAA,cAAW"}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}